name: Release

on:
  push:
    tags:
      - 'v*.*.*'

  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        type: string

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Generate changelog
      id: changelog
      run: |
        # Get commits since last tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

        if [ -z "$PREV_TAG" ]; then
          echo "First release - getting all commits"
          COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          echo "Getting commits since $PREV_TAG"
          COMMITS=$(git log $PREV_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi

        # Group commits by type
        CHANGELOG="## What's Changed\n\n"

        # Features
        FEATURES=$(echo "$COMMITS" | grep -i "^\- feat\|^\- add" || true)
        if [ ! -z "$FEATURES" ]; then
          CHANGELOG="${CHANGELOG}### ‚ú® Features\n${FEATURES}\n\n"
        fi

        # Fixes
        FIXES=$(echo "$COMMITS" | grep -i "^\- fix\|^\- bug" || true)
        if [ ! -z "$FIXES" ]; then
          CHANGELOG="${CHANGELOG}### üêõ Bug Fixes\n${FIXES}\n\n"
        fi

        # Documentation
        DOCS=$(echo "$COMMITS" | grep -i "^\- docs" || true)
        if [ ! -z "$DOCS" ]; then
          CHANGELOG="${CHANGELOG}### üìö Documentation\n${DOCS}\n\n"
        fi

        # Benchmarks
        BENCHMARKS=$(echo "$COMMITS" | grep -i "^\- \[BENCHMARK\]" || true)
        if [ ! -z "$BENCHMARKS" ]; then
          CHANGELOG="${CHANGELOG}### üìä Benchmarks\n${BENCHMARKS}\n\n"
        fi

        # Other
        OTHER=$(echo "$COMMITS" | grep -v -i "^\- feat\|^\- add\|^\- fix\|^\- bug\|^\- docs\|^\- \[BENCHMARK\]" || true)
        if [ ! -z "$OTHER" ]; then
          CHANGELOG="${CHANGELOG}### üîß Other Changes\n${OTHER}\n\n"
        fi

        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Count benchmark results
      id: benchmarks
      run: |
        BENCHMARK_COUNT=$(find benchmarks/results/raw -name "*.json" 2>/dev/null | wc -l)
        REPORT_COUNT=$(find benchmarks/results/reports -name "*.md" 2>/dev/null | wc -l)
        MODEL_COUNT=$(grep -c "^## " docs/models/models-registry.md || echo "0")

        echo "benchmarks=$BENCHMARK_COUNT" >> $GITHUB_OUTPUT
        echo "reports=$REPORT_COUNT" >> $GITHUB_OUTPUT
        echo "models=$MODEL_COUNT" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body: |
          # LLM-Local-Lab ${{ steps.version.outputs.version }}

          ${{ steps.changelog.outputs.changelog }}

          ## üìä Statistics

          - **Benchmarks Completed**: ${{ steps.benchmarks.outputs.benchmarks }}
          - **Reports Generated**: ${{ steps.benchmarks.outputs.reports }}
          - **Models Tested**: ${{ steps.benchmarks.outputs.models }}

          ## üîß Installation

          ```bash
          git clone https://github.com/${{ github.repository }}.git
          cd LLM-Local-Lab
          git checkout ${{ steps.version.outputs.version }}
          pip install -r requirements.txt
          ```

          ## üìö Documentation

          See [README.md](README.md) for getting started guide.

          ---

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.version.outputs.version }}
        draft: false
        prerelease: false
        generate_release_notes: false

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build-artifacts
    if: false  # Disabled by default, enable when ready to publish

    environment:
      name: pypi
      url: https://pypi.org/p/llm-local-lab

    permissions:
      id-token: write

    steps:
    - uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
